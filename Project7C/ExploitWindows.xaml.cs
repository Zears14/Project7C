using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using KrnlAPI;
using System.IO;
using Microsoft.Win32;
using Microsoft.Diagnostics.Instrumentation.Extensions.Intercept;
using System.Xml;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using ICSharpCode.AvalonEdit.Highlighting;

namespace Project7C
{
    /// <summary>
    /// Interaction logic for ExploitWindows.xaml
    /// </summary>
    public partial class ExploitWindows : Window
    {
        public ExploitWindows()
        {
            InitializeComponent();
            Stream stream = File.OpenRead("./bin/lua.xshd");
            XmlTextReader reader = new XmlTextReader(stream);
            AvalonEditor.SyntaxHighlighting = HighlightingLoader.Load(reader, HighlightingManager.Instance);
            ReloadScripts();
            MainAPI.Load();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Environment.Exit(0);
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            WindowState = WindowState.Minimized;
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            MainAPI.Execute(AvalonEditor.Text);
        }

        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            MainAPI.Inject();
        }

        private void Button_Click_4(object sender, RoutedEventArgs e)
        {
            AvalonEditor.Text = "";
        }

        private void Button_Click_5(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.OpenFileDialog ofd = new Microsoft.Win32.OpenFileDialog();
            ofd.Filter = "Lua Scripts (*.lua)|*.lua|Txt Scripts (*.txt)|*.txt";
            ofd.Title = "Open Scripts";
            ofd.ShowDialog();
            {
                Stream s = ofd.OpenFile();
                StreamReader sr = new StreamReader(s);
                AvalonEditor.Text = sr.ReadToEnd();
                sr.Close();
            }
        }

        private void Button_Click_6(object sender, RoutedEventArgs e)
        {
            Microsoft.Win32.SaveFileDialog sfd = new Microsoft.Win32.SaveFileDialog();
            sfd.Filter = "Lua Scripts (*.lua)|*.lua|Txt Scripts (*.txt)|*.txt";
            sfd.Title = "Save Scripts";
            sfd.ShowDialog();
            {
                Stream s = sfd.OpenFile();
                StreamWriter sw = new StreamWriter(s);
                sw.Write(AvalonEditor.Text);
                sw.Close();


            }
        }

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (List.SelectedItem == null)
            {
                MessageBox.Show("Items Doesnt Exist");
            }
            else
            {
                AvalonEditor.Text = File.ReadAllText($"./Scripts/{List.SelectedItem}");
            }
        }

        public static void PopulateListBox(ListBox lsb, string Folder, string FileType)
        {
            DirectoryInfo dinfo = new DirectoryInfo(Folder);
            FileInfo[] Files = dinfo.GetFiles(FileType);
            foreach (FileInfo file in Files)
            {
                lsb.Items.Add(file.Name);
            }
        }



        private void Button_Click_7(object sender, RoutedEventArgs e)
        {
            ReloadScripts();
        }


        public void ReloadScripts()
        {
            this.List.Items.Clear();
            foreach (FileInfo fileInfo in new DirectoryInfo("./Scripts").GetFiles("*.txt"))
            {
                this.List.Items.Add(fileInfo.Name);
            }
            foreach (FileInfo fileInfo2 in new DirectoryInfo("./Scripts").GetFiles("*.lua"))
            {
                this.List.Items.Add(fileInfo2.Name);
            }
        }

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {

        }

        private void Grid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            this.DragMove();
        }
    }
}

